syntax = "proto3";

package auth;

import "google/protobuf/timestamp.proto";

// Настройки для генерации Go кода.
option go_package = "reelcy.sso.v1;ssov1";

// Сервис аутентификации и авторизации пользователей.
// Содержит методы для регистрации, входа в систему, обновления токенов и получения информации о пользователях.
service Auth {
    rpc Register(RegisterRequest) returns (RegisterResponse);
    rpc ResendVerificationToken (ResendVerificationTokenRequest) returns (ResendVerificationTokenResponse);
    rpc Login(LoginRequest) returns (LoginResponse);
    rpc RefreshToken(RefreshTokenRequest) returns (RefreshTokenResponse);
    rpc Verify(VerifyRequest) returns (VerifyResponse);
    rpc Logout(LogoutRequest) returns (LogoutResponse);
}

service Users {
    rpc GetUserById(GetUserByIdRequest) returns (GetUserByIdResponse);
    rpc GetUsers(GetUsersRequest) returns (GetUsersResponse);
    rpc UpdateUser(UpdateUserRequest) returns (UpdateUserResponse);
    rpc DeleteUser(DeleteUserRequest) returns (DeleteUserResponse);
    rpc UploadAvatar(UploadAvatarRequest) returns (UploadAvatarResponse);
}

// ==========Register==========
message RegisterRequest {
    string username = 1;
    string email = 2;
    string password = 3;
}

// возвращает id созданного пользователя
message RegisterResponse {
    string user_id = 1;
}

// ==========Resend verification token==========
message ResendVerificationTokenRequest{
    string user_id = 1;
}

message ResendVerificationTokenResponse {
    string status = 1;
}

// ==========Login==========
message LoginRequest {
    string email = 1;
    string password = 2;
}

message LoginResponse {
    string access_token = 1; // токен доступа, используется для доступа к защищённым ресурсам
    google.protobuf.Timestamp access_token_expires_at= 2; // время истечения токена
    string refresh_token = 3;
    google.protobuf.Timestamp refresh_token_expires_at = 4; // время истечения токена
}

// ==========Refresh==========
message RefreshTokenRequest {
    string refresh_token = 1;
}

message RefreshTokenResponse {
    string access_token = 1;
    google.protobuf.Timestamp access_token_expires_at= 2; // время истечения токена
    string refresh_token = 3;
    google.protobuf.Timestamp refresh_token_expires_at = 4; // время истечения токена
}

// ==========GetUserById==========
message GetUserByIdRequest {
    string user_id = 1;
}

message GetUserByIdResponse {
    User user = 1; 
}

// ==========GetUsers==========
message GetUsersRequest {
    repeated string user_ids = 1; // Массив ID пользователей
}

message GetUsersResponse {
    repeated User users = 1; // Массив структур пользователей
}

// Структура пользователя
message User {
    string user_id = 1;
    string name = 2;
    string email = 3;
    string avatar_url = 4; // URL аватара пользователя
}

// ==========Verify==========
message VerifyRequest {
    string verify_token = 1; // Токен доступа, содержит информацию о пользователе (id, email)
}

message VerifyResponse {
    bool is_valid = 1; // true, если токен валиден => пользователь верифицирован
}

message LogoutRequest {
    string refresh_token = 1;
}

message LogoutResponse {
    string status = 1; // например, "OK" 
}

// ==========UpdateUser==========
message UpdateUserRequest {
    string user_id = 1;
    string name = 2;
    string email = 3;
}

message UpdateUserResponse {
    string user_id = 1; // ID обновлённого пользователя
}

// ==========DeleteUser==========
message DeleteUserRequest {
    string user_id = 1;
}

message DeleteUserResponse {
    string user_id = 1; // ID удалённого пользователя
}

// ==========UploadPhoto==========
message UploadAvatarRequest {
    string user_id = 1;
    bytes photo = 2;
    string content_type = 3; // тип контента (image/png, image/jpeg и т.д.)
}

message UploadAvatarResponse {
    string url = 1;
}
