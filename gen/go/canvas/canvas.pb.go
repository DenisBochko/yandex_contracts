// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v4.25.6
// source: canvas/canvas.proto

package canvasv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateCanvasRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Width         int32                  `protobuf:"varint,2,opt,name=width,proto3" json:"width,omitempty"`
	Height        int32                  `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
	OwnerId       string                 `protobuf:"bytes,4,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"` // id пользователя, который создал канвас
	Privacy       string                 `protobuf:"bytes,5,opt,name=privacy,proto3" json:"privacy,omitempty"`                // приватность канваса (public, private, friends)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateCanvasRequest) Reset() {
	*x = CreateCanvasRequest{}
	mi := &file_canvas_canvas_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateCanvasRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCanvasRequest) ProtoMessage() {}

func (x *CreateCanvasRequest) ProtoReflect() protoreflect.Message {
	mi := &file_canvas_canvas_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCanvasRequest.ProtoReflect.Descriptor instead.
func (*CreateCanvasRequest) Descriptor() ([]byte, []int) {
	return file_canvas_canvas_proto_rawDescGZIP(), []int{0}
}

func (x *CreateCanvasRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateCanvasRequest) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *CreateCanvasRequest) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *CreateCanvasRequest) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *CreateCanvasRequest) GetPrivacy() string {
	if x != nil {
		return x.Privacy
	}
	return ""
}

type CreateCanvasResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CanvasId      string                 `protobuf:"bytes,1,opt,name=canvas_id,json=canvasId,proto3" json:"canvas_id,omitempty"` // id созданного канваса
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateCanvasResponse) Reset() {
	*x = CreateCanvasResponse{}
	mi := &file_canvas_canvas_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateCanvasResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCanvasResponse) ProtoMessage() {}

func (x *CreateCanvasResponse) ProtoReflect() protoreflect.Message {
	mi := &file_canvas_canvas_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCanvasResponse.ProtoReflect.Descriptor instead.
func (*CreateCanvasResponse) Descriptor() ([]byte, []int) {
	return file_canvas_canvas_proto_rawDescGZIP(), []int{1}
}

func (x *CreateCanvasResponse) GetCanvasId() string {
	if x != nil {
		return x.CanvasId
	}
	return ""
}

type GetCanvasByIdRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CanvasId      string                 `protobuf:"bytes,1,opt,name=canvas_id,json=canvasId,proto3" json:"canvas_id,omitempty"` // id канваса
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCanvasByIdRequest) Reset() {
	*x = GetCanvasByIdRequest{}
	mi := &file_canvas_canvas_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCanvasByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCanvasByIdRequest) ProtoMessage() {}

func (x *GetCanvasByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_canvas_canvas_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCanvasByIdRequest.ProtoReflect.Descriptor instead.
func (*GetCanvasByIdRequest) Descriptor() ([]byte, []int) {
	return file_canvas_canvas_proto_rawDescGZIP(), []int{2}
}

func (x *GetCanvasByIdRequest) GetCanvasId() string {
	if x != nil {
		return x.CanvasId
	}
	return ""
}

type GetCanvasByIdResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Canvas        *Canvas                `protobuf:"bytes,1,opt,name=canvas,proto3" json:"canvas,omitempty"` // канвас
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCanvasByIdResponse) Reset() {
	*x = GetCanvasByIdResponse{}
	mi := &file_canvas_canvas_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCanvasByIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCanvasByIdResponse) ProtoMessage() {}

func (x *GetCanvasByIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_canvas_canvas_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCanvasByIdResponse.ProtoReflect.Descriptor instead.
func (*GetCanvasByIdResponse) Descriptor() ([]byte, []int) {
	return file_canvas_canvas_proto_rawDescGZIP(), []int{3}
}

func (x *GetCanvasByIdResponse) GetCanvas() *Canvas {
	if x != nil {
		return x.Canvas
	}
	return nil
}

type GetImageByIdRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CanvasId      string                 `protobuf:"bytes,1,opt,name=canvas_id,json=canvasId,proto3" json:"canvas_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetImageByIdRequest) Reset() {
	*x = GetImageByIdRequest{}
	mi := &file_canvas_canvas_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetImageByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetImageByIdRequest) ProtoMessage() {}

func (x *GetImageByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_canvas_canvas_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetImageByIdRequest.ProtoReflect.Descriptor instead.
func (*GetImageByIdRequest) Descriptor() ([]byte, []int) {
	return file_canvas_canvas_proto_rawDescGZIP(), []int{4}
}

func (x *GetImageByIdRequest) GetCanvasId() string {
	if x != nil {
		return x.CanvasId
	}
	return ""
}

type GetImageByIdResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Image         []byte                 `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetImageByIdResponse) Reset() {
	*x = GetImageByIdResponse{}
	mi := &file_canvas_canvas_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetImageByIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetImageByIdResponse) ProtoMessage() {}

func (x *GetImageByIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_canvas_canvas_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetImageByIdResponse.ProtoReflect.Descriptor instead.
func (*GetImageByIdResponse) Descriptor() ([]byte, []int) {
	return file_canvas_canvas_proto_rawDescGZIP(), []int{5}
}

func (x *GetImageByIdResponse) GetImage() []byte {
	if x != nil {
		return x.Image
	}
	return nil
}

type GetCanvasesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CanvasIds     []string               `protobuf:"bytes,1,rep,name=canvas_ids,json=canvasIds,proto3" json:"canvas_ids,omitempty"` // id канвасов
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCanvasesRequest) Reset() {
	*x = GetCanvasesRequest{}
	mi := &file_canvas_canvas_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCanvasesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCanvasesRequest) ProtoMessage() {}

func (x *GetCanvasesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_canvas_canvas_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCanvasesRequest.ProtoReflect.Descriptor instead.
func (*GetCanvasesRequest) Descriptor() ([]byte, []int) {
	return file_canvas_canvas_proto_rawDescGZIP(), []int{6}
}

func (x *GetCanvasesRequest) GetCanvasIds() []string {
	if x != nil {
		return x.CanvasIds
	}
	return nil
}

type GetCanvasesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Canvases      []*Canvas              `protobuf:"bytes,1,rep,name=canvases,proto3" json:"canvases,omitempty"` // канвасы
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCanvasesResponse) Reset() {
	*x = GetCanvasesResponse{}
	mi := &file_canvas_canvas_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCanvasesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCanvasesResponse) ProtoMessage() {}

func (x *GetCanvasesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_canvas_canvas_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCanvasesResponse.ProtoReflect.Descriptor instead.
func (*GetCanvasesResponse) Descriptor() ([]byte, []int) {
	return file_canvas_canvas_proto_rawDescGZIP(), []int{7}
}

func (x *GetCanvasesResponse) GetCanvases() []*Canvas {
	if x != nil {
		return x.Canvases
	}
	return nil
}

type GetImageByIdsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CanvasIds     []string               `protobuf:"bytes,1,rep,name=canvas_ids,json=canvasIds,proto3" json:"canvas_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetImageByIdsRequest) Reset() {
	*x = GetImageByIdsRequest{}
	mi := &file_canvas_canvas_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetImageByIdsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetImageByIdsRequest) ProtoMessage() {}

func (x *GetImageByIdsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_canvas_canvas_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetImageByIdsRequest.ProtoReflect.Descriptor instead.
func (*GetImageByIdsRequest) Descriptor() ([]byte, []int) {
	return file_canvas_canvas_proto_rawDescGZIP(), []int{8}
}

func (x *GetImageByIdsRequest) GetCanvasIds() []string {
	if x != nil {
		return x.CanvasIds
	}
	return nil
}

type GetImageByIdsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Images        [][]byte               `protobuf:"bytes,1,rep,name=images,proto3" json:"images,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetImageByIdsResponse) Reset() {
	*x = GetImageByIdsResponse{}
	mi := &file_canvas_canvas_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetImageByIdsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetImageByIdsResponse) ProtoMessage() {}

func (x *GetImageByIdsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_canvas_canvas_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetImageByIdsResponse.ProtoReflect.Descriptor instead.
func (*GetImageByIdsResponse) Descriptor() ([]byte, []int) {
	return file_canvas_canvas_proto_rawDescGZIP(), []int{9}
}

func (x *GetImageByIdsResponse) GetImages() [][]byte {
	if x != nil {
		return x.Images
	}
	return nil
}

type GetCanvasByOwnerIdRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        []string               `protobuf:"bytes,1,rep,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCanvasByOwnerIdRequest) Reset() {
	*x = GetCanvasByOwnerIdRequest{}
	mi := &file_canvas_canvas_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCanvasByOwnerIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCanvasByOwnerIdRequest) ProtoMessage() {}

func (x *GetCanvasByOwnerIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_canvas_canvas_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCanvasByOwnerIdRequest.ProtoReflect.Descriptor instead.
func (*GetCanvasByOwnerIdRequest) Descriptor() ([]byte, []int) {
	return file_canvas_canvas_proto_rawDescGZIP(), []int{10}
}

func (x *GetCanvasByOwnerIdRequest) GetUserId() []string {
	if x != nil {
		return x.UserId
	}
	return nil
}

type GetCanvasByOwnerIdResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Canvases      []*Canvas              `protobuf:"bytes,1,rep,name=canvases,proto3" json:"canvases,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCanvasByOwnerIdResponse) Reset() {
	*x = GetCanvasByOwnerIdResponse{}
	mi := &file_canvas_canvas_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCanvasByOwnerIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCanvasByOwnerIdResponse) ProtoMessage() {}

func (x *GetCanvasByOwnerIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_canvas_canvas_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCanvasByOwnerIdResponse.ProtoReflect.Descriptor instead.
func (*GetCanvasByOwnerIdResponse) Descriptor() ([]byte, []int) {
	return file_canvas_canvas_proto_rawDescGZIP(), []int{11}
}

func (x *GetCanvasByOwnerIdResponse) GetCanvases() []*Canvas {
	if x != nil {
		return x.Canvases
	}
	return nil
}

type UploadImageRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CanvasId      string                 `protobuf:"bytes,1,opt,name=canvas_id,json=canvasId,proto3" json:"canvas_id,omitempty"` // id канваса
	Image         []byte                 `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`                       // изображение канваса в формате PNG
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UploadImageRequest) Reset() {
	*x = UploadImageRequest{}
	mi := &file_canvas_canvas_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UploadImageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadImageRequest) ProtoMessage() {}

func (x *UploadImageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_canvas_canvas_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadImageRequest.ProtoReflect.Descriptor instead.
func (*UploadImageRequest) Descriptor() ([]byte, []int) {
	return file_canvas_canvas_proto_rawDescGZIP(), []int{12}
}

func (x *UploadImageRequest) GetCanvasId() string {
	if x != nil {
		return x.CanvasId
	}
	return ""
}

func (x *UploadImageRequest) GetImage() []byte {
	if x != nil {
		return x.Image
	}
	return nil
}

type UploadImageResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CanvasId      string                 `protobuf:"bytes,1,opt,name=canvas_id,json=canvasId,proto3" json:"canvas_id,omitempty"` // id загруженного изображения
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UploadImageResponse) Reset() {
	*x = UploadImageResponse{}
	mi := &file_canvas_canvas_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UploadImageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadImageResponse) ProtoMessage() {}

func (x *UploadImageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_canvas_canvas_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadImageResponse.ProtoReflect.Descriptor instead.
func (*UploadImageResponse) Descriptor() ([]byte, []int) {
	return file_canvas_canvas_proto_rawDescGZIP(), []int{13}
}

func (x *UploadImageResponse) GetCanvasId() string {
	if x != nil {
		return x.CanvasId
	}
	return ""
}

// Одобрение по почте (отправляем овнеру на почту)
type JoinToCanvasRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CanvasId      string                 `protobuf:"bytes,1,opt,name=canvas_id,json=canvasId,proto3" json:"canvas_id,omitempty"` // id канваса
	MemberId      string                 `protobuf:"bytes,2,opt,name=member_id,json=memberId,proto3" json:"member_id,omitempty"` // id пользователя который хочет присоединиться к канвасу
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JoinToCanvasRequest) Reset() {
	*x = JoinToCanvasRequest{}
	mi := &file_canvas_canvas_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JoinToCanvasRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinToCanvasRequest) ProtoMessage() {}

func (x *JoinToCanvasRequest) ProtoReflect() protoreflect.Message {
	mi := &file_canvas_canvas_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinToCanvasRequest.ProtoReflect.Descriptor instead.
func (*JoinToCanvasRequest) Descriptor() ([]byte, []int) {
	return file_canvas_canvas_proto_rawDescGZIP(), []int{14}
}

func (x *JoinToCanvasRequest) GetCanvasId() string {
	if x != nil {
		return x.CanvasId
	}
	return ""
}

func (x *JoinToCanvasRequest) GetMemberId() string {
	if x != nil {
		return x.MemberId
	}
	return ""
}

type JoinToCanvasResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CanvasId      string                 `protobuf:"bytes,1,opt,name=canvas_id,json=canvasId,proto3" json:"canvas_id,omitempty"` // id канваса
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JoinToCanvasResponse) Reset() {
	*x = JoinToCanvasResponse{}
	mi := &file_canvas_canvas_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JoinToCanvasResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinToCanvasResponse) ProtoMessage() {}

func (x *JoinToCanvasResponse) ProtoReflect() protoreflect.Message {
	mi := &file_canvas_canvas_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinToCanvasResponse.ProtoReflect.Descriptor instead.
func (*JoinToCanvasResponse) Descriptor() ([]byte, []int) {
	return file_canvas_canvas_proto_rawDescGZIP(), []int{15}
}

func (x *JoinToCanvasResponse) GetCanvasId() string {
	if x != nil {
		return x.CanvasId
	}
	return ""
}

type AddToWhiteListRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CanvasId      string                 `protobuf:"bytes,1,opt,name=canvas_id,json=canvasId,proto3" json:"canvas_id,omitempty"` // id канваса
	MemberId      string                 `protobuf:"bytes,2,opt,name=member_id,json=memberId,proto3" json:"member_id,omitempty"` // id пользователя который хочет присоединиться к канвасу
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddToWhiteListRequest) Reset() {
	*x = AddToWhiteListRequest{}
	mi := &file_canvas_canvas_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddToWhiteListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddToWhiteListRequest) ProtoMessage() {}

func (x *AddToWhiteListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_canvas_canvas_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddToWhiteListRequest.ProtoReflect.Descriptor instead.
func (*AddToWhiteListRequest) Descriptor() ([]byte, []int) {
	return file_canvas_canvas_proto_rawDescGZIP(), []int{16}
}

func (x *AddToWhiteListRequest) GetCanvasId() string {
	if x != nil {
		return x.CanvasId
	}
	return ""
}

func (x *AddToWhiteListRequest) GetMemberId() string {
	if x != nil {
		return x.MemberId
	}
	return ""
}

type AddToWhiteListResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CanvasId      string                 `protobuf:"bytes,1,opt,name=canvas_id,json=canvasId,proto3" json:"canvas_id,omitempty"` // id канваса
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddToWhiteListResponse) Reset() {
	*x = AddToWhiteListResponse{}
	mi := &file_canvas_canvas_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddToWhiteListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddToWhiteListResponse) ProtoMessage() {}

func (x *AddToWhiteListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_canvas_canvas_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddToWhiteListResponse.ProtoReflect.Descriptor instead.
func (*AddToWhiteListResponse) Descriptor() ([]byte, []int) {
	return file_canvas_canvas_proto_rawDescGZIP(), []int{17}
}

func (x *AddToWhiteListResponse) GetCanvasId() string {
	if x != nil {
		return x.CanvasId
	}
	return ""
}

type UpdateCanvasRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CanvasId      string                 `protobuf:"bytes,1,opt,name=canvas_id,json=canvasId,proto3" json:"canvas_id,omitempty"` // id канваса
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                         // название канваса
	Privacy       string                 `protobuf:"bytes,3,opt,name=privacy,proto3" json:"privacy,omitempty"`                   // приватность канваса (public, private, friends)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateCanvasRequest) Reset() {
	*x = UpdateCanvasRequest{}
	mi := &file_canvas_canvas_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateCanvasRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCanvasRequest) ProtoMessage() {}

func (x *UpdateCanvasRequest) ProtoReflect() protoreflect.Message {
	mi := &file_canvas_canvas_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCanvasRequest.ProtoReflect.Descriptor instead.
func (*UpdateCanvasRequest) Descriptor() ([]byte, []int) {
	return file_canvas_canvas_proto_rawDescGZIP(), []int{18}
}

func (x *UpdateCanvasRequest) GetCanvasId() string {
	if x != nil {
		return x.CanvasId
	}
	return ""
}

func (x *UpdateCanvasRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateCanvasRequest) GetPrivacy() string {
	if x != nil {
		return x.Privacy
	}
	return ""
}

type UpdateCanvasResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CanvasId      string                 `protobuf:"bytes,1,opt,name=canvas_id,json=canvasId,proto3" json:"canvas_id,omitempty"` // id обновлённого канваса
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateCanvasResponse) Reset() {
	*x = UpdateCanvasResponse{}
	mi := &file_canvas_canvas_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateCanvasResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCanvasResponse) ProtoMessage() {}

func (x *UpdateCanvasResponse) ProtoReflect() protoreflect.Message {
	mi := &file_canvas_canvas_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCanvasResponse.ProtoReflect.Descriptor instead.
func (*UpdateCanvasResponse) Descriptor() ([]byte, []int) {
	return file_canvas_canvas_proto_rawDescGZIP(), []int{19}
}

func (x *UpdateCanvasResponse) GetCanvasId() string {
	if x != nil {
		return x.CanvasId
	}
	return ""
}

type DeleteCanvasRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CanvasId      string                 `protobuf:"bytes,1,opt,name=canvas_id,json=canvasId,proto3" json:"canvas_id,omitempty"` // id канваса
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteCanvasRequest) Reset() {
	*x = DeleteCanvasRequest{}
	mi := &file_canvas_canvas_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteCanvasRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCanvasRequest) ProtoMessage() {}

func (x *DeleteCanvasRequest) ProtoReflect() protoreflect.Message {
	mi := &file_canvas_canvas_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCanvasRequest.ProtoReflect.Descriptor instead.
func (*DeleteCanvasRequest) Descriptor() ([]byte, []int) {
	return file_canvas_canvas_proto_rawDescGZIP(), []int{20}
}

func (x *DeleteCanvasRequest) GetCanvasId() string {
	if x != nil {
		return x.CanvasId
	}
	return ""
}

type DeleteCanvasResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CanvasId      string                 `protobuf:"bytes,1,opt,name=canvas_id,json=canvasId,proto3" json:"canvas_id,omitempty"` // id удалённого канваса
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteCanvasResponse) Reset() {
	*x = DeleteCanvasResponse{}
	mi := &file_canvas_canvas_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteCanvasResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCanvasResponse) ProtoMessage() {}

func (x *DeleteCanvasResponse) ProtoReflect() protoreflect.Message {
	mi := &file_canvas_canvas_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCanvasResponse.ProtoReflect.Descriptor instead.
func (*DeleteCanvasResponse) Descriptor() ([]byte, []int) {
	return file_canvas_canvas_proto_rawDescGZIP(), []int{21}
}

func (x *DeleteCanvasResponse) GetCanvasId() string {
	if x != nil {
		return x.CanvasId
	}
	return ""
}

type Canvas struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CanvasId      string                 `protobuf:"bytes,1,opt,name=canvas_id,json=canvasId,proto3" json:"canvas_id,omitempty"`       // id канваса
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                               // название канваса
	Width         int32                  `protobuf:"varint,3,opt,name=width,proto3" json:"width,omitempty"`                            // ширина канваса
	Height        int32                  `protobuf:"varint,4,opt,name=height,proto3" json:"height,omitempty"`                          // высота канваса
	OwnerId       string                 `protobuf:"bytes,5,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`          // id пользователя, который создал канвас
	MembersIds    []string               `protobuf:"bytes,6,rep,name=members_ids,json=membersIds,proto3" json:"members_ids,omitempty"` // id пользователей, которые могут редактировать канвас
	Privacy       string                 `protobuf:"bytes,7,opt,name=privacy,proto3" json:"privacy,omitempty"`                         // приватность канваса (public, private, friends)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Canvas) Reset() {
	*x = Canvas{}
	mi := &file_canvas_canvas_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Canvas) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Canvas) ProtoMessage() {}

func (x *Canvas) ProtoReflect() protoreflect.Message {
	mi := &file_canvas_canvas_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Canvas.ProtoReflect.Descriptor instead.
func (*Canvas) Descriptor() ([]byte, []int) {
	return file_canvas_canvas_proto_rawDescGZIP(), []int{22}
}

func (x *Canvas) GetCanvasId() string {
	if x != nil {
		return x.CanvasId
	}
	return ""
}

func (x *Canvas) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Canvas) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *Canvas) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *Canvas) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *Canvas) GetMembersIds() []string {
	if x != nil {
		return x.MembersIds
	}
	return nil
}

func (x *Canvas) GetPrivacy() string {
	if x != nil {
		return x.Privacy
	}
	return ""
}

var File_canvas_canvas_proto protoreflect.FileDescriptor

var file_canvas_canvas_proto_rawDesc = string([]byte{
	0x0a, 0x13, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x2f, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x22, 0x8c, 0x01,
	0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12,
	0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x22, 0x33, 0x0a, 0x14,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x49,
	0x64, 0x22, 0x33, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x42, 0x79,
	0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6e,
	0x76, 0x61, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61,
	0x6e, 0x76, 0x61, 0x73, 0x49, 0x64, 0x22, 0x3f, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6e,
	0x76, 0x61, 0x73, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x26, 0x0a, 0x06, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x2e, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x52,
	0x06, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x22, 0x32, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x49, 0x64, 0x22, 0x2c, 0x0a, 0x14, 0x47,
	0x65, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x22, 0x33, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x43, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x09, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x49, 0x64, 0x73, 0x22, 0x41,
	0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x08, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73,
	0x2e, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x52, 0x08, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x65,
	0x73, 0x22, 0x35, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x79, 0x49,
	0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x61, 0x6e,
	0x76, 0x61, 0x73, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x61, 0x6e, 0x76, 0x61, 0x73, 0x49, 0x64, 0x73, 0x22, 0x2f, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x42, 0x79, 0x49, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0c, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x22, 0x34, 0x0a, 0x19, 0x47, 0x65, 0x74,
	0x43, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x42, 0x79, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x48, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x42, 0x79, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a,
	0x08, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x2e, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x52,
	0x08, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x65, 0x73, 0x22, 0x47, 0x0a, 0x12, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x22, 0x32, 0x0a, 0x13, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6e,
	0x76, 0x61, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61,
	0x6e, 0x76, 0x61, 0x73, 0x49, 0x64, 0x22, 0x4f, 0x0a, 0x13, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x6f,
	0x43, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x22, 0x33, 0x0a, 0x14, 0x4a, 0x6f, 0x69, 0x6e, 0x54,
	0x6f, 0x43, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x49, 0x64, 0x22, 0x51, 0x0a, 0x15,
	0x41, 0x64, 0x64, 0x54, 0x6f, 0x57, 0x68, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x35, 0x0a, 0x16, 0x41, 0x64, 0x64, 0x54, 0x6f, 0x57, 0x68, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6e,
	0x76, 0x61, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61,
	0x6e, 0x76, 0x61, 0x73, 0x49, 0x64, 0x22, 0x60, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x22, 0x33, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x49, 0x64, 0x22, 0x32, 0x0a,
	0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x49,
	0x64, 0x22, 0x33, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x6e, 0x76, 0x61,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6e,
	0x76, 0x61, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61,
	0x6e, 0x76, 0x61, 0x73, 0x49, 0x64, 0x22, 0xbd, 0x01, 0x0a, 0x06, 0x63, 0x61, 0x6e, 0x76, 0x61,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x49, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x32, 0xd8, 0x06, 0x0a, 0x06, 0x43, 0x61, 0x6e, 0x76, 0x61,
	0x73, 0x12, 0x49, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6e, 0x76, 0x61,
	0x73, 0x12, 0x1b, 0x2e, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c,
	0x2e, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61,
	0x6e, 0x76, 0x61, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0d,
	0x47, 0x65, 0x74, 0x43, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x42, 0x79, 0x49, 0x64, 0x12, 0x1c, 0x2e,
	0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6e, 0x76, 0x61, 0x73,
	0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x63, 0x61,
	0x6e, 0x76, 0x61, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x42, 0x79,
	0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0c, 0x47, 0x65,
	0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x79, 0x49, 0x64, 0x12, 0x1b, 0x2e, 0x63, 0x61, 0x6e,
	0x76, 0x61, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x79, 0x49, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73,
	0x2e, 0x47, 0x65, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x42, 0x79, 0x49, 0x64, 0x73, 0x12, 0x1c, 0x2e, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x2e,
	0x47, 0x65, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x79, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x2e, 0x47, 0x65,
	0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x79, 0x49, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6e, 0x76, 0x61, 0x73,
	0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x2e, 0x63, 0x61, 0x6e, 0x76, 0x61,
	0x73, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x42, 0x79, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x63, 0x61,
	0x6e, 0x76, 0x61, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x42, 0x79,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x46, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x65, 0x73, 0x12, 0x1a,
	0x2e, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6e, 0x76, 0x61,
	0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x63, 0x61, 0x6e,
	0x76, 0x61, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0b, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x2e, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x2e,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x2e, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x49, 0x0a, 0x0c, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x6f, 0x43, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x12,
	0x1b, 0x2e, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x6f, 0x43,
	0x61, 0x6e, 0x76, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x63,
	0x61, 0x6e, 0x76, 0x61, 0x73, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x6f, 0x43, 0x61, 0x6e, 0x76,
	0x61, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x0e, 0x41, 0x64,
	0x64, 0x54, 0x6f, 0x57, 0x68, 0x69, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x2e, 0x63,
	0x61, 0x6e, 0x76, 0x61, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x54, 0x6f, 0x57, 0x68, 0x69, 0x74, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x63, 0x61,
	0x6e, 0x76, 0x61, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x54, 0x6f, 0x57, 0x68, 0x69, 0x74, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0c, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x12, 0x1b, 0x2e, 0x63, 0x61,
	0x6e, 0x76, 0x61, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6e, 0x76, 0x61,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x63, 0x61, 0x6e, 0x76, 0x61,
	0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x12, 0x1b, 0x2e, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x43, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x42, 0x1b, 0x5a, 0x19, 0x72, 0x65, 0x65, 0x6c, 0x63, 0x79, 0x2e, 0x63, 0x61, 0x6e, 0x76,
	0x61, 0x73, 0x2e, 0x76, 0x31, 0x3b, 0x63, 0x61, 0x6e, 0x76, 0x61, 0x73, 0x76, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_canvas_canvas_proto_rawDescOnce sync.Once
	file_canvas_canvas_proto_rawDescData []byte
)

func file_canvas_canvas_proto_rawDescGZIP() []byte {
	file_canvas_canvas_proto_rawDescOnce.Do(func() {
		file_canvas_canvas_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_canvas_canvas_proto_rawDesc), len(file_canvas_canvas_proto_rawDesc)))
	})
	return file_canvas_canvas_proto_rawDescData
}

var file_canvas_canvas_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_canvas_canvas_proto_goTypes = []any{
	(*CreateCanvasRequest)(nil),        // 0: canvas.CreateCanvasRequest
	(*CreateCanvasResponse)(nil),       // 1: canvas.CreateCanvasResponse
	(*GetCanvasByIdRequest)(nil),       // 2: canvas.GetCanvasByIdRequest
	(*GetCanvasByIdResponse)(nil),      // 3: canvas.GetCanvasByIdResponse
	(*GetImageByIdRequest)(nil),        // 4: canvas.GetImageByIdRequest
	(*GetImageByIdResponse)(nil),       // 5: canvas.GetImageByIdResponse
	(*GetCanvasesRequest)(nil),         // 6: canvas.GetCanvasesRequest
	(*GetCanvasesResponse)(nil),        // 7: canvas.GetCanvasesResponse
	(*GetImageByIdsRequest)(nil),       // 8: canvas.GetImageByIdsRequest
	(*GetImageByIdsResponse)(nil),      // 9: canvas.GetImageByIdsResponse
	(*GetCanvasByOwnerIdRequest)(nil),  // 10: canvas.GetCanvasByOwnerIdRequest
	(*GetCanvasByOwnerIdResponse)(nil), // 11: canvas.GetCanvasByOwnerIdResponse
	(*UploadImageRequest)(nil),         // 12: canvas.UploadImageRequest
	(*UploadImageResponse)(nil),        // 13: canvas.UploadImageResponse
	(*JoinToCanvasRequest)(nil),        // 14: canvas.JoinToCanvasRequest
	(*JoinToCanvasResponse)(nil),       // 15: canvas.JoinToCanvasResponse
	(*AddToWhiteListRequest)(nil),      // 16: canvas.AddToWhiteListRequest
	(*AddToWhiteListResponse)(nil),     // 17: canvas.AddToWhiteListResponse
	(*UpdateCanvasRequest)(nil),        // 18: canvas.UpdateCanvasRequest
	(*UpdateCanvasResponse)(nil),       // 19: canvas.UpdateCanvasResponse
	(*DeleteCanvasRequest)(nil),        // 20: canvas.DeleteCanvasRequest
	(*DeleteCanvasResponse)(nil),       // 21: canvas.DeleteCanvasResponse
	(*Canvas)(nil),                     // 22: canvas.canvas
}
var file_canvas_canvas_proto_depIdxs = []int32{
	22, // 0: canvas.GetCanvasByIdResponse.canvas:type_name -> canvas.canvas
	22, // 1: canvas.GetCanvasesResponse.canvases:type_name -> canvas.canvas
	22, // 2: canvas.GetCanvasByOwnerIdResponse.canvases:type_name -> canvas.canvas
	0,  // 3: canvas.Canvas.CreateCanvas:input_type -> canvas.CreateCanvasRequest
	2,  // 4: canvas.Canvas.GetCanvasById:input_type -> canvas.GetCanvasByIdRequest
	4,  // 5: canvas.Canvas.GetImageById:input_type -> canvas.GetImageByIdRequest
	8,  // 6: canvas.Canvas.GetImageByIds:input_type -> canvas.GetImageByIdsRequest
	10, // 7: canvas.Canvas.GetCanvasByUserId:input_type -> canvas.GetCanvasByOwnerIdRequest
	6,  // 8: canvas.Canvas.GetCanvases:input_type -> canvas.GetCanvasesRequest
	12, // 9: canvas.Canvas.UploadImage:input_type -> canvas.UploadImageRequest
	14, // 10: canvas.Canvas.JoinToCanvas:input_type -> canvas.JoinToCanvasRequest
	16, // 11: canvas.Canvas.AddToWhiteList:input_type -> canvas.AddToWhiteListRequest
	18, // 12: canvas.Canvas.UpdateCanvas:input_type -> canvas.UpdateCanvasRequest
	20, // 13: canvas.Canvas.DeleteCanvas:input_type -> canvas.DeleteCanvasRequest
	1,  // 14: canvas.Canvas.CreateCanvas:output_type -> canvas.CreateCanvasResponse
	3,  // 15: canvas.Canvas.GetCanvasById:output_type -> canvas.GetCanvasByIdResponse
	5,  // 16: canvas.Canvas.GetImageById:output_type -> canvas.GetImageByIdResponse
	9,  // 17: canvas.Canvas.GetImageByIds:output_type -> canvas.GetImageByIdsResponse
	11, // 18: canvas.Canvas.GetCanvasByUserId:output_type -> canvas.GetCanvasByOwnerIdResponse
	7,  // 19: canvas.Canvas.GetCanvases:output_type -> canvas.GetCanvasesResponse
	13, // 20: canvas.Canvas.UploadImage:output_type -> canvas.UploadImageResponse
	15, // 21: canvas.Canvas.JoinToCanvas:output_type -> canvas.JoinToCanvasResponse
	17, // 22: canvas.Canvas.AddToWhiteList:output_type -> canvas.AddToWhiteListResponse
	19, // 23: canvas.Canvas.UpdateCanvas:output_type -> canvas.UpdateCanvasResponse
	21, // 24: canvas.Canvas.DeleteCanvas:output_type -> canvas.DeleteCanvasResponse
	14, // [14:25] is the sub-list for method output_type
	3,  // [3:14] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_canvas_canvas_proto_init() }
func file_canvas_canvas_proto_init() {
	if File_canvas_canvas_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_canvas_canvas_proto_rawDesc), len(file_canvas_canvas_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_canvas_canvas_proto_goTypes,
		DependencyIndexes: file_canvas_canvas_proto_depIdxs,
		MessageInfos:      file_canvas_canvas_proto_msgTypes,
	}.Build()
	File_canvas_canvas_proto = out.File
	file_canvas_canvas_proto_goTypes = nil
	file_canvas_canvas_proto_depIdxs = nil
}
